package org.flarbear.swtpc6800;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Canvas;
import java.awt.Checkbox;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Panel;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;

public class SWTPc_CT_64 extends Canvas implements RS232Device {
    public static final int SCRCOLS = 64;
    public static final int SCRROWS = 16;
    public static final int CHARCOLS = 8;
    public static final int CHARROWS = 13;

    private int pixw;
    private int pixh;
    private int charw;
    private int charh;

    static final int BORDERW = 10;
    static final int BORDERH = 10;

    private RS232Device serialOut;
    private SWTPc6800 theComputer;
    private Motorola6800 theProcessor;
    private SWTPc_AC_30 theCassette;
    private Frame theFrame;
    private Frame theAC30Frame;

    private final byte screen[];
    private final byte scrolltmp[];

    private int cursorpos;

    private boolean ShowCtrl;
    private boolean UClock;
    private boolean BigChars;

    public SWTPc_CT_64() {
        screen = new byte[SCRROWS * SCRCOLS];
        scrolltmp = new byte[SCRCOLS];
        cursorpos = 0;
        clearscreen();
        UClock = true;
        setBackground(Color.black);
        setForeground(Color.green);
        charimgs = new Image[256];
        calculateCharImages();
    }

    private final Image charimgs[];

    private void calculateCharImages() {
        if (BigChars) {
            pixw = 2;
            pixh = 3;
        } else {
            pixw = pixh = 1;
        }
        charw = CHARCOLS * pixw;
        charh = CHARROWS * pixh;
        for (int i = 0; i < 256; i++) {
            charimgs[i] = new BufferedImage(charw, charh,
                    BufferedImage.TYPE_BYTE_INDEXED);
            Graphics g = charimgs[i].getGraphics();
            int csi = (i & 0x7f) * CHARROWS;
            if (i < 128) {
                g.setColor(Color.black);
                g.fillRect(0, 0, charw, charh);
                g.setColor(Color.green);
            } else {
                g.setColor(Color.green);
                g.fillRect(0, 0, charw, charh);
                g.setColor(Color.black);
            }
            int y = 0;
            for (int j = 0; j < CHARROWS; j++) {
                int b = charset_6575[csi];
                int x = 0;
                while (b != 0) {
                    if ((b & 0x80) != 0) {
                        g.fillRect(x, y, pixw, pixh);
                    }
                    b <<= 1;
                    x += pixw;
                }
                csi++;
                y += pixh;
            }
        }
        if (theFrame != null) {
            theFrame.hide();
            theFrame.invalidate();
            theFrame.pack();
            if (theAC30Frame != null) {
                theAC30Frame.hide();
                theAC30Frame.pack();
                theAC30Frame.invalidate();
                adjustCassetteBounds();
            }
            theFrame.show();
            if (theAC30Frame != null) {
                theAC30Frame.show();
            }
        }
    }

    public void powerOn() {
        theFrame = new Frame("SWTPc CT-64 Emulator");
        theFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        theFrame.setLayout(new BorderLayout());
        theFrame.add(this, "Center");
        Panel p = new Panel();
        p.setFocusable(false);
        if (theComputer != null) {
            Button b = new Button("Reset MP68");
            b.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    theComputer.tripManualReset();
                }
            });
            b.setFocusable(false);
            p.add(b);
        }
        if (theProcessor != null) {
            Button b = new Button("Opcode Stats");
            b.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    theProcessor.printStats();
                }
            });
            b.setFocusable(false);
            p.add(b);
        }
        Checkbox cb = new Checkbox("Show Ctrl", ShowCtrl);
        cb.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                ShowCtrl = (e.getStateChange() == ItemEvent.SELECTED);
            }
        });
        cb.setFocusable(false);
        p.add(cb);
        cb = new Checkbox("U/C lock", UClock);
        cb.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                UClock = (e.getStateChange() == ItemEvent.SELECTED);
            }
        });
        cb.setFocusable(false);
        p.add(cb);
        cb = new Checkbox("Big Chars", BigChars);
        cb.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                BigChars = (e.getStateChange() == ItemEvent.SELECTED);
                calculateCharImages();
                repaint();
            }
        });
        cb.setFocusable(false);
        p.add(cb);
        theFrame.add(p, "South");
        theFrame.pack();
        theFrame.show();
        if (theCassette != null) {
            showCassette();
        }
        requestFocus();
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (serialOut != null) {
                    char ch = e.getKeyChar();
                    if (ch == 0x0a && !e.isControlDown()) {
                        ch = 0x0d;
                    }
                    if (UClock) {
                        ch = Character.toUpperCase(ch);
                    }
                    //serialOut.waitForCTS();
                    serialOut.sendTo((byte) ch);
                }
            }
        });
    }

    private void showCassette() {
        theAC30Frame = new Frame("SWTPc AC-30 Emulator");
        theAC30Frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        theAC30Frame.add(theCassette);
        theAC30Frame.pack();
        adjustCassetteBounds();
        theAC30Frame.show();
    }

    private void adjustCassetteBounds() {
        theAC30Frame.setBounds(theFrame.getX(), theFrame.getY() + theFrame.getHeight(),
                Math.max(theFrame.getWidth(), theAC30Frame.getWidth()),
                theAC30Frame.getHeight());
    }

    @Override
    public void connectTo(RS232Device otherdevice) {
        this.serialOut = otherdevice;
    }

    public void connectCassetteControl(SWTPc_AC_30 cass) {
        this.theCassette = cass;
        if (theFrame != null) {
            showCassette();
        }
    }

    public void addResetFor(SWTPc6800 machine) {
        theComputer = machine;
    }

    public void addStatsButtonFor(Motorola6800 proc) {
        theProcessor = proc;
    }

    public void repaint(Rectangle r) {
        repaint(r.x, r.y, r.width, r.height);
    }

    @Override
    public void sendTo(byte data) {
        // Insert data into screen...
        data &= 0x7f;
        if (ShowCtrl || data >= ' ') {
            Rectangle r = getCursorRect();
            screen[cursorpos++] = data;
            if (cursorpos == screen.length) {
                cursorpos -= SCRCOLS;
                scroll();
            } else {
                r.add(getCursorRect());
                repaint(r);
            }
        } else {
            switch (data) {
                case 0x08:
                    backSpace();
                    break;
                case 0x0a:
                    newLine();
                    break;
                case 0x0d:
                    carriageReturn();
                    break;
                case 0x10:
                    homeCursor();
                    break;
                case 0x11:
                    if (theCassette != null) {
                        theCassette.readOn();
                    }
                    break;
                case 0x12:
                    if (theCassette != null) {
                        theCassette.punchOn();
                    }
                    break;
                case 0x13:
                    if (theCassette != null) {
                        theCassette.readOff();
                    }
                    break;
                case 0x14:
                    if (theCassette != null) {
                        theCassette.punchOff();
                    }
                    break;
                case 0x15:
                    clearEOL();
                    break;
                case 0x16:
                    clearEOS();
                    break;
            }
        }
    }

    @Override
    public void waitForCTS() {
    }

    public Rectangle getCursorRect() {
        int cy = cursorpos / SCRCOLS;
        int cx = cursorpos % SCRCOLS;
        return new Rectangle(BORDERW + cx * charw,
                BORDERH + cy * charh,
                charw, charh);
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(BORDERW + SCRCOLS * charw + BORDERW,
                BORDERH + SCRROWS * charh + BORDERH);
    }

    @Override
    public void paint(Graphics g) {
        int pos = 0;
        int y = BORDERH;
        for (int r = 0; r < SCRROWS; r++) {
            int x = BORDERW;
            for (int c = 0; c < SCRCOLS; c++) {
                int ch = screen[pos] & 0xff;
                if (pos == cursorpos) {
                    ch ^= 0x80;
                }
                g.drawImage(charimgs[ch], x, y, null);
                x += charw;
                pos++;
            }
            y += charh;
        }
    }

    public final void clearscreen() {
        for (int pos = 0; pos < screen.length; pos++) {
            screen[pos] = ' ';
        }
        cursorpos = 0;
    }

    public void backSpace() {
        Rectangle r = getCursorRect();
        cursorpos--;
        r.add(getCursorRect());
        repaint(r);
    }

    public void carriageReturn() {
        if ((cursorpos % SCRCOLS) != 0) {
            Rectangle r = getCursorRect();
            cursorpos = (cursorpos / SCRCOLS) * SCRCOLS;
            r.add(getCursorRect());
            repaint(r);
        }
    }

    public void newLine() {
        if (cursorpos + SCRCOLS < screen.length) {
            Rectangle r = getCursorRect();
            cursorpos += SCRCOLS;
            r.add(getCursorRect());
            repaint(r);
        } else {
            scroll();
        }
    }

    public void scroll() {
        System.arraycopy(screen, 0, scrolltmp, 0, SCRCOLS);
        System.arraycopy(screen, SCRCOLS, screen, 0, SCRCOLS * (SCRROWS - 1));
        System.arraycopy(scrolltmp, 0, screen, SCRCOLS * (SCRROWS - 1), SCRCOLS);
        clearEOL();
        repaint();
    }

    public void homeCursor() {
        repaint(getCursorRect());
        cursorpos = 0;
        repaint(getCursorRect());
    }

    public void clearEOL() {
        int pos = cursorpos;
        do {
            screen[pos++] = ' ';
        } while ((pos % SCRCOLS) != 0);
        Rectangle r = getCursorRect();
        r.width = SCRCOLS * charw;
        repaint(r);
    }

    public void clearEOS() {
        for (int pos = cursorpos; pos < screen.length; pos++) {
            screen[pos] = ' ';
        }
        repaint();
    }

    private static final char charset_6575[] = {
        /*00*/  0x00, 0x88, 0xC8, 0xA8, 0x98, 0xAA, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00, 0x00,  // NU
        /*01*/  0x00, 0x70, 0x80, 0x60, 0x10, 0xE2, 0x22, 0x3E, 0x22, 0x22, 0x00, 0x00, 0x00,  // SH
        /*02*/  0x00, 0x70, 0x80, 0x60, 0x10, 0xE2, 0x14, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,  // SX
        /*03*/  0x00, 0xF0, 0x80, 0xE0, 0x80, 0xF2, 0x14, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,  // EX
        /*04*/  0x00, 0xF0, 0x80, 0xE0, 0x80, 0xF0, 0x3E, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00,  // ET
        /*05*/  0x00, 0xF0, 0x80, 0xE0, 0x80, 0xEC, 0x12, 0x12, 0x16, 0x0E, 0x00, 0x00, 0x00,  // EQ
        /*06*/  0x00, 0x60, 0x90, 0xF0, 0x90, 0x12, 0x14, 0x18, 0x14, 0x12, 0x00, 0x00, 0x00,  // AK
        /*07*/  0x00, 0xE0, 0x90, 0xE0, 0x90, 0xE0, 0x10, 0x10, 0x10, 0x1E, 0x00, 0x00, 0x00,  // BL
        /*08*/  0x00, 0xE0, 0x90, 0xE0, 0x90, 0xEE, 0x10, 0x0C, 0x02, 0x1C, 0x00, 0x00, 0x00,  // BS
        /*09*/  0x00, 0x90, 0x90, 0xF0, 0x90, 0x90, 0x3E, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00,  // HT
        /*0A*/  0x00, 0x80, 0x80, 0x80, 0xF0, 0x1E, 0x10, 0x1C, 0x10, 0x10, 0x00, 0x00, 0x00,  // LF
        /*0B*/  0x00, 0x88, 0x88, 0x88, 0x50, 0x20, 0x3E, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00,  // VT
        /*0C*/  0x00, 0xF0, 0x80, 0xE0, 0x80, 0x9E, 0x10, 0x1C, 0x10, 0x10, 0x00, 0x00, 0x00,  // FF
        /*0D*/  0x00, 0x70, 0x80, 0x80, 0x80, 0x7C, 0x12, 0x1C, 0x14, 0x12, 0x00, 0x00, 0x00,  // CR
        /*0E*/  0x00, 0x70, 0x80, 0x60, 0x10, 0xEC, 0x12, 0x12, 0x12, 0x0C, 0x00, 0x00, 0x00,  // SO
        /*0F*/  0x00, 0x70, 0x80, 0x60, 0x10, 0xEE, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00, 0x00,  // SI

        /*10*/  0x00, 0xE0, 0x90, 0x90, 0x90, 0xE0, 0x10, 0x10, 0x10, 0x1E, 0x00, 0x00, 0x00,  // DL
        /*11*/  0x00, 0xE0, 0x90, 0x90, 0x90, 0xE4, 0x0C, 0x04, 0x04, 0x0E, 0x00, 0x00, 0x00,  // D1
        /*12*/  0x00, 0xE0, 0x90, 0x90, 0x90, 0xEC, 0x12, 0x04, 0x08, 0x1E, 0x00, 0x00, 0x00,  // D2
        /*13*/  0x00, 0xE0, 0x90, 0x90, 0x90, 0xEC, 0x02, 0x0C, 0x02, 0x1C, 0x00, 0x00, 0x00,  // D3
        /*14*/  0x00, 0xE0, 0x90, 0x90, 0x90, 0xE4, 0x0C, 0x14, 0x3E, 0x04, 0x00, 0x00, 0x00,  // D4
        /*15*/  0x00, 0x90, 0xD0, 0xB0, 0x90, 0x92, 0x14, 0x18, 0x14, 0x12, 0x00, 0x00, 0x00,  // NK
        /*16*/  0x00, 0x70, 0x80, 0x60, 0x10, 0xE2, 0x14, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00,  // SY
        /*17*/  0x00, 0xF0, 0x80, 0xE0, 0x80, 0xFC, 0x12, 0x1C, 0x12, 0x1C, 0x00, 0x00, 0x00,  // EB
        /*18*/  0x00, 0x70, 0x80, 0x80, 0x80, 0x70, 0x12, 0x1A, 0x16, 0x12, 0x00, 0x00, 0x00,  // CN
        /*19*/  0x00, 0xF0, 0x80, 0xE0, 0x80, 0xF0, 0x22, 0x36, 0x2A, 0x22, 0x00, 0x00, 0x00,  // EM
        /*1A*/  0x00, 0x70, 0x80, 0x60, 0x10, 0xFC, 0x12, 0x1C, 0x12, 0x1C, 0x00, 0x00, 0x00,  // SB
        /*1B*/  0x00, 0xF0, 0x80, 0xE0, 0x80, 0xF0, 0x0E, 0x10, 0x10, 0x0E, 0x00, 0x00, 0x00,  // EC
        /*1C*/  0x00, 0xF0, 0x80, 0xE0, 0x80, 0x8E, 0x10, 0x0C, 0x02, 0x1C, 0x00, 0x00, 0x00,  // FS
        /*1D*/  0x00, 0x70, 0x80, 0xB0, 0x90, 0x6E, 0x10, 0x0C, 0x02, 0x1C, 0x00, 0x00, 0x00,  // GS
        /*1E*/  0x00, 0xE0, 0x90, 0xE0, 0x90, 0x8E, 0x10, 0x0C, 0x02, 0x1C, 0x00, 0x00, 0x00,  // RS
        /*1F*/  0x00, 0x90, 0x90, 0x90, 0x90, 0x6E, 0x10, 0x0C, 0x02, 0x1C, 0x00, 0x00, 0x00,  // US

        /*20*/  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // space
        /*21*/  0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00,  // !
        /*22*/  0x00, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // "
        /*23*/  0x00, 0x28, 0x28, 0x28, 0xFE, 0x28, 0xFE, 0x28, 0x28, 0x28, 0x00, 0x00, 0x00,  // #
        /*24*/  0x00, 0x10, 0x7E, 0x90, 0x90, 0x7C, 0x12, 0x12, 0xFC, 0x10, 0x00, 0x00, 0x00,  // $
        /*25*/  0x00, 0x40, 0xA2, 0x44, 0x08, 0x10, 0x20, 0x44, 0x8A, 0x04, 0x00, 0x00, 0x00,  // %
        /*26*/  0x00, 0x70, 0x88, 0x88, 0x50, 0x20, 0x52, 0x8C, 0x8C, 0x72, 0x00, 0x00, 0x00,  // &
        /*27*/  0x00, 0x18, 0x18, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // '
        /*28*/  0x00, 0x08, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00, 0x00, 0x00,  // (
        /*29*/  0x00, 0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00, 0x00, 0x00,  // )
        /*2A*/  0x00, 0x00, 0x10, 0x92, 0x54, 0x38, 0x54, 0x92, 0x10, 0x00, 0x00, 0x00, 0x00,  // *
        /*2B*/  0x00, 0x00, 0x10, 0x10, 0x10, 0xFE, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00,  // +
        /*2C*/  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x20, 0x40, 0x00,  // ,
        /*2D*/  0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // -
        /*2E*/  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00,  // .
        /*2F*/  0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00,  // /

        /*30*/  0x00, 0x7C, 0x82, 0x86, 0x8A, 0x92, 0xA2, 0xC2, 0x82, 0x7C, 0x00, 0x00, 0x00,  // 0
        /*31*/  0x00, 0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C, 0x00, 0x00, 0x00,  // 1
        /*32*/  0x00, 0x7C, 0x82, 0x02, 0x04, 0x38, 0x40, 0x80, 0x80, 0xFE, 0x00, 0x00, 0x00,  // 2
        /*33*/  0x00, 0x7C, 0x82, 0x02, 0x02, 0x3C, 0x02, 0x02, 0x82, 0x7C, 0x00, 0x00, 0x00,  // 3
        /*34*/  0x00, 0x04, 0x0C, 0x14, 0x24, 0x44, 0x84, 0xFE, 0x04, 0x04, 0x00, 0x00, 0x00,  // 4
        /*35*/  0x00, 0xFE, 0x80, 0x80, 0xF8, 0x04, 0x02, 0x02, 0x84, 0x78, 0x00, 0x00, 0x00,  // 5
        /*36*/  0x00, 0x3C, 0x40, 0x80, 0x80, 0xFC, 0x82, 0x82, 0x82, 0x7C, 0x00, 0x00, 0x00,  // 6
        /*37*/  0x00, 0xFE, 0x82, 0x04, 0x08, 0x10, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00,  // 7
        /*38*/  0x00, 0x7C, 0x82, 0x82, 0x82, 0x7C, 0x82, 0x82, 0x82, 0x7C, 0x00, 0x00, 0x00,  // 8
        /*39*/  0x00, 0x7C, 0x82, 0x82, 0x82, 0x7E, 0x02, 0x02, 0x04, 0x78, 0x00, 0x00, 0x00,  // 9
        /*3A*/  0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00,  // :
        /*3B*/  0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x20, 0x40, 0x00,  // ;
        /*3C*/  0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00, 0x00,  // <
        /*3D*/  0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // =
        /*3E*/  0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00, 0x00,  // >
        /*3F*/  0x00, 0x3C, 0x42, 0x42, 0x02, 0x0C, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00,  // ?

        /*40*/  0x00, 0x3C, 0x42, 0x9A, 0xAA, 0xAA, 0xBC, 0x80, 0x40, 0x3C, 0x00, 0x00, 0x00,  // @
        /*41*/  0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0xFE, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,  // A
        /*42*/  0x00, 0xFC, 0x42, 0x42, 0x42, 0x7C, 0x42, 0x42, 0x42, 0xFC, 0x00, 0x00, 0x00,  // B
        /*43*/  0x00, 0x3C, 0x42, 0x80, 0x80, 0x80, 0x80, 0x80, 0x42, 0x3C, 0x00, 0x00, 0x00,  // C
        /*44*/  0x00, 0xF8, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0xF8, 0x00, 0x00, 0x00,  // D
        /*45*/  0x00, 0xFE, 0x80, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0xFE, 0x00, 0x00, 0x00,  // E
        /*46*/  0x00, 0xFE, 0x80, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,  // F
        /*47*/  0x00, 0x3C, 0x42, 0x80, 0x80, 0x80, 0x9E, 0x82, 0x42, 0x3C, 0x00, 0x00, 0x00,  // G
        /*48*/  0x00, 0x82, 0x82, 0x82, 0x82, 0xFE, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,  // H
        /*49*/  0x00, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C, 0x00, 0x00, 0x00,  // I
        /*4A*/  0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00, 0x00,  // J
        /*4B*/  0x00, 0x82, 0x84, 0x88, 0x90, 0xA0, 0xD0, 0x88, 0x84, 0x82, 0x00, 0x00, 0x00,  // K
        /*4C*/  0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFE, 0x00, 0x00, 0x00,  // L
        /*4D*/  0x00, 0x82, 0xC6, 0xAA, 0x92, 0x92, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,  // M
        /*4E*/  0x00, 0x82, 0xC2, 0xA2, 0x92, 0x8A, 0x86, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,  // N
        /*4F*/  0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00,  // O

        /*50*/  0x00, 0xFC, 0x82, 0x82, 0x82, 0xFC, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,  // P
        /*51*/  0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x92, 0x8A, 0x44, 0x3A, 0x00, 0x00, 0x00,  // Q
        /*52*/  0x00, 0xFC, 0x82, 0x82, 0x82, 0xFC, 0x90, 0x88, 0x84, 0x82, 0x00, 0x00, 0x00,  // R
        /*53*/  0x00, 0x7C, 0x82, 0x80, 0x80, 0x7C, 0x02, 0x02, 0x82, 0x7C, 0x00, 0x00, 0x00,  // S
        /*54*/  0x00, 0xFE, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,  // T
        /*55*/  0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7C, 0x00, 0x00, 0x00,  // U
        /*56*/  0x00, 0x82, 0x82, 0x82, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x00, 0x00, 0x00,  // V
        /*57*/  0x00, 0x82, 0x82, 0x82, 0x82, 0x92, 0x92, 0xAA, 0xC6, 0x82, 0x00, 0x00, 0x00,  // W
        /*58*/  0x00, 0x82, 0x82, 0x44, 0x28, 0x10, 0x28, 0x44, 0x82, 0x82, 0x00, 0x00, 0x00,  // X
        /*59*/  0x00, 0x82, 0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,  // Y
        /*5A*/  0x00, 0xFE, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xFE, 0x00, 0x00, 0x00,  // Z
        /*5B*/  0x00, 0x78, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x78, 0x00, 0x00, 0x00,  // [
        /*5C*/  0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00,  // \ 
        /*5D*/  0x00, 0x78, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x78, 0x00, 0x00, 0x00,  // ]
        /*5E*/  0x00, 0x10, 0x28, 0x44, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ^
        /*5F*/  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00,  // _

        /*60*/  0x00, 0x30, 0x30, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // `
        /*61*/  0x00, 0x00, 0x00, 0x00, 0x78, 0x04, 0x7C, 0x84, 0x84, 0x7A, 0x00, 0x00, 0x00,  // a
        /*62*/  0x00, 0x80, 0x80, 0x80, 0xB8, 0xC4, 0x84, 0x84, 0xC4, 0xB8, 0x00, 0x00, 0x00,  // b
        /*63*/  0x00, 0x00, 0x00, 0x00, 0x78, 0x84, 0x80, 0x80, 0x84, 0x78, 0x00, 0x00, 0x00,  // c
        /*64*/  0x00, 0x04, 0x04, 0x04, 0x74, 0x8C, 0x84, 0x84, 0x8C, 0x74, 0x00, 0x00, 0x00,  // d
        /*65*/  0x00, 0x00, 0x00, 0x00, 0x78, 0x84, 0xFC, 0x80, 0x80, 0x78, 0x00, 0x00, 0x00,  // e
        /*66*/  0x00, 0x18, 0x24, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00,  // f
        /*67*/  0x00, 0x00, 0x00, 0x00, 0x74, 0x8C, 0x84, 0x8C, 0x74, 0x04, 0x04, 0x84, 0x78,  // g
        /*68*/  0x00, 0x80, 0x80, 0x80, 0xB8, 0xC4, 0x84, 0x84, 0x84, 0x84, 0x00, 0x00, 0x00,  // h
        /*69*/  0x00, 0x00, 0x10, 0x00, 0x30, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00, 0x00,  // i
        /*6A*/  0x00, 0x00, 0x00, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38,  // j
        /*6B*/  0x00, 0x80, 0x80, 0x80, 0x88, 0x90, 0xA0, 0xD0, 0x88, 0x84, 0x00, 0x00, 0x00,  // k
        /*6C*/  0x00, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00, 0x00,  // l
        /*6D*/  0x00, 0x00, 0x00, 0x00, 0xEC, 0x92, 0x92, 0x92, 0x92, 0x92, 0x00, 0x00, 0x00,  // m
        /*6E*/  0x00, 0x00, 0x00, 0x00, 0xB8, 0xC4, 0x84, 0x84, 0x84, 0x84, 0x00, 0x00, 0x00,  // n
        /*6F*/  0x00, 0x00, 0x00, 0x00, 0x78, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00, 0x00,  // o

        /*70*/  0x00, 0x00, 0x00, 0x00, 0xB8, 0xC4, 0x84, 0x84, 0xC4, 0xB8, 0x80, 0x80, 0x80,  // p
        /*71*/  0x00, 0x00, 0x00, 0x00, 0x74, 0x8C, 0x84, 0x84, 0x8C, 0x74, 0x04, 0x04, 0x04,  // q
        /*72*/  0x00, 0x00, 0x00, 0x00, 0xB8, 0xC4, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,  // r
        /*73*/  0x00, 0x00, 0x00, 0x00, 0x78, 0x84, 0x60, 0x18, 0x84, 0x78, 0x00, 0x00, 0x00,  // s
        /*74*/  0x00, 0x00, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x20, 0x24, 0x18, 0x00, 0x00, 0x00,  // t
        /*75*/  0x00, 0x00, 0x00, 0x00, 0x84, 0x84, 0x84, 0x84, 0x8C, 0x74, 0x00, 0x00, 0x00,  // u
        /*76*/  0x00, 0x00, 0x00, 0x00, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00,  // v
        /*77*/  0x00, 0x00, 0x00, 0x00, 0x82, 0x92, 0x92, 0x92, 0x92, 0x6C, 0x00, 0x00, 0x00,  // w
        /*78*/  0x00, 0x00, 0x00, 0x00, 0x84, 0x48, 0x30, 0x30, 0x48, 0x84, 0x00, 0x00, 0x00,  // x
        /*79*/  0x00, 0x00, 0x00, 0x00, 0x84, 0x84, 0x84, 0x84, 0x8C, 0x74, 0x04, 0x84, 0x78,  // y
        /*7A*/  0x00, 0x00, 0x00, 0x00, 0xFC, 0x08, 0x10, 0x20, 0x40, 0xFC, 0x00, 0x00, 0x00,  // z
        /*7B*/  0x00, 0x1C, 0x20, 0x20, 0x20, 0x40, 0x20, 0x20, 0x20, 0x1C, 0x00, 0x00, 0x00,  // {
        /*7C*/  0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00,  // |
        /*7D*/  0x00, 0x30, 0x08, 0x08, 0x08, 0x04, 0x08, 0x08, 0x08, 0x30, 0x00, 0x00, 0x00,  // }
        /*7E*/  0x00, 0x60, 0x92, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ~
        /*7F*/  0x00, 0x48, 0x92, 0x24, 0x48, 0x92, 0x24, 0x48, 0x92, 0x24, 0x00, 0x00, 0x00,  // checkerboard
    };
}
